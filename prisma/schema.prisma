generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  displayName String?      @map("display_name")
  avatarUrl   String?      @map("avatar_url")
  preferences String       @default("{}")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  lastLoginAt DateTime?    @map("last_login_at")
  collections Collection[]
  notes       Note[]
  sharedNotes SharedNote[]

  @@map("users")
}

model Note {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  type        NoteType
  title       String?
  content     String?
  url         String?
  description String?
  domain      String?
  faviconUrl  String?          @map("favicon_url")
  imageUrl    String?          @map("image_url")
  metadata    String           @default("{}")
  tags        String           @default("")
  isArchived  Boolean          @default(false) @map("is_archived")
  isFavorite  Boolean          @default(false) @map("is_favorite")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  accessedAt  DateTime         @default(now()) @map("accessed_at")
  color       String?          @default("default")
  isHidden    Boolean          @default(false) @map("is_hidden")
  collections NoteCollection[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedNotes SharedNote[]

  @@index([userId])
  @@index([type])
  @@index([createdAt(sort: Desc)])
  @@map("notes")
}

model Collection {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  name        String
  description String?
  color       String           @default("#6B7280")
  isDefault   Boolean          @default(false) @map("is_default")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       NoteCollection[]

  @@index([userId])
  @@map("collections")
}

model NoteCollection {
  noteId       String     @map("note_id")
  collectionId String     @map("collection_id")
  addedAt      DateTime   @default(now()) @map("added_at")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  note         Note       @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@id([noteId, collectionId])
  @@map("note_collections")
}

model SharedNote {
  id           String    @id @default(cuid())
  noteId       String    @map("note_id")
  sharedBy     String    @map("shared_by")
  shareToken   String    @unique @map("share_token")
  isPublic     Boolean   @default(false) @map("is_public")
  passwordHash String?   @map("password_hash")
  expiresAt    DateTime? @map("expires_at")
  viewCount    Int       @default(0) @map("view_count")
  createdAt    DateTime  @default(now()) @map("created_at")
  noteRef      Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  note         User      @relation(fields: [sharedBy], references: [id], onDelete: Cascade)

  @@index([shareToken])
  @@index([noteId])
  @@map("shared_notes")
}

enum NoteType {
  LINK
  TEXT
}
